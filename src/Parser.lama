-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))
);

var binops = fun(l, op, r) {Binop(op, l, r)};

-- mind priority
var ops = {
  [Left, [s ("!!"), binops] : {}],
  [Left, [s ("&&"), binops] : {}],
  [Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binops] : {}],
  [Left, [s ("+") | s ("-"), binops] : {}],
  [Left, [s ("*") | s ("/") | s ("%"), binops] : {}]
};

var exp = memo $ eta expr (ops, primary);

var stmtSeq = memo $ eta syntax (
  x=stmt s[";"] y=stmtSeq  {Seq (x, y)} |
  stmt
);

var ifExpr = memo $ eta syntax (
  kIf x=exp kThen y=stmtSeq kFi {If (x, y, Skip)}             |
  kIf x=exp kThen y=stmtSeq z=condElsePart kFi {If (x, y, z)}
),
 condElsePart = memo $ eta syntax (
  kElif x=exp kThen y=stmtSeq {If (x, y, Skip)}             |
  kElif x=exp kThen y=stmtSeq z=condElsePart {If (x, y, z)} |
  kElse x=stmtSeq {x}
 );

var forLoop = memo $ eta syntax (
    kFor w=stmtSeq s[","] x=exp s[","] y=stmtSeq kDo z=stmtSeq kOd {Seq(w, While(x, Seq(z, y)))}
);

var stmt = memo $ eta syntax (kWrite x=inbr[s("("), exp, s(")")]    {Write (x)}       |
                              kRead  x=inbr[s("("), lident, s(")")] {Read (x)}        |
                              x=lident s[":="] y=exp                {Assn (x, y)}     |
                              kWhile x=exp kDo y=stmtSeq kOd        {While (x, y)}    |
                              kDo x=stmtSeq kWhile y=exp kOd        {DoWhile (x, y)}  |
                              x=stmt s[";"] y=stmt end              {Seq (x, y)}      |
                              kSkip                                 {Skip}            |
                              ifExpr                                                  |
                              forLoop
                             );

-- Public top-level parser
public parse = stmt;
